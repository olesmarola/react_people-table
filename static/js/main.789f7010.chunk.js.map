{"version":3,"sources":["PersonRow.js","PeopleTable.js","api.js","PeoplePage.js","App.js","index.js"],"names":["PersonRow","_ref","selected","selectRow","headers","person","id","sex","born","age","century","react_default","a","createElement","className","cn","concat","person--selected","onClick","map","header","key","code","person__bornBefore1650","person__after65","TABLE_HEADERS","label","type","React","memo","people","sortFields","location","sortData","useLocation","history","useHistory","match","useRouteMatch","search","URLSearchParams","sortBy","get","sortOrder","useEffect","find","h","push","pathname","name","toLowerCase","replace","length","src_PersonRow","params","getPeopleFromServer","response","regenerator_default","async","_context","prev","next","awrap","fetch","sent","abrupt","json","stop","PeoplePage","_useState","useState","_useState2","Object","slicedToArray","setPeople","_useState3","_useState4","curField","setCurField","query","visiblePeople","toConsumableArray","peopleFromServer","peopleFromServerWithIds","i","objectSpread2","died","Math","ceil","getPeople","searchQuery","trim","filter","mother","father","includes","field","peopleCopy","defineProperty","sort","b","localeCompare","lib","placeholder","debounceTimeout","onChange","e","set","target","value","toString","src_PeopleTable","reverse","App","Fragment","react_router_dom","to","react_router","path","component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.789f7010.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst PersonRow = ({ selected, selectRow, headers, person }) => {\n  const { id, sex, born, age, century } = person;\n\n  return (\n    <tr\n      className={\n        cn(\n          'person',\n          `person person--lived-in-${century}`,\n          sex === 'm' ? 'person--male' : 'person--female',\n          { 'person--selected': selected }\n        )}\n      onClick={() => selectRow(id)}\n    >\n      {headers.map(header => (\n        <td\n          key={header.code}\n          className={\n            cn(\n              { person__bornBefore1650: header.code === 'name' && born < 1650 },\n              { person__after65: header.code === 'age' && age >= 65 }\n            )\n          }\n        >\n          {person[header.code]}\n        </td>\n      ))}\n    </tr>\n  );\n};\n\nPersonRow.propTypes = {\n  person: PropTypes.shape({\n    id: PropTypes.number,\n    sex: PropTypes.string,\n    born: PropTypes.number,\n    age: PropTypes.number,\n    century: PropTypes.number,\n  }).isRequired,\n  selected: PropTypes.bool.isRequired,\n  selectRow: PropTypes.func.isRequired,\n  headers: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default PersonRow;\n","import React, { useEffect } from 'react';\nimport { useHistory, useRouteMatch, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport PersonRow from './PersonRow';\n\nconst TABLE_HEADERS = [\n  {\n    code: 'id',\n    label: 'Id',\n    type: 'number',\n  },\n  {\n    code: 'name',\n    label: 'Name',\n    type: 'string',\n  },\n  {\n    code: 'sex',\n    label: 'Sex',\n    type: 'string',\n  },\n  {\n    code: 'born',\n    label: 'Born',\n    type: 'number',\n  },\n  {\n    code: 'died',\n    label: 'Died',\n    type: 'number',\n  },\n  {\n    code: 'age',\n    label: 'Age',\n    type: 'number',\n  },\n  {\n    code: 'century',\n    label: 'Century',\n    type: 'number',\n  },\n  {\n    code: 'mother',\n    label: 'Mother',\n    type: 'string',\n  },\n  {\n    code: 'father',\n    label: 'Father',\n    type: 'string',\n  },\n];\n\nconst PeopleTable = ({ people, sortFields, sortData }) => {\n  const location = useLocation();\n  const history = useHistory();\n  const match = useRouteMatch();\n  const search = new URLSearchParams(location.search);\n  const sortBy = search.get('sortBy');\n  const sortOrder = search.get('sortOrder');\n\n  useEffect(() => {\n    if (sortBy) {\n      sortFields(\n        sortBy,\n        TABLE_HEADERS.find(h => h.code === sortBy).type, sortOrder\n      );\n    }\n  }, []);\n\n  const selectRow = (id) => {\n    history.push({\n      pathname: `/people/${people\n        .find(person => id === person.id).name\n        .toLowerCase()\n        .replace(/\\s/g, '-')}`,\n      search: location.search,\n    });\n  };\n\n  return (\n    people.length > 0 && (\n      <table className=\"people__table\">\n        <thead>\n          <tr>\n            {TABLE_HEADERS.map(header => (\n              <th\n                key={header.code}\n                onClick={() => {\n                  sortFields(header.code, header.type);\n                }}\n              >\n                {header.label}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {people.map(\n            person => (\n              <PersonRow\n                key={person.name}\n                person={person}\n                headers={TABLE_HEADERS}\n                selected={person.name\n                  .toLowerCase()\n                  .replace(/\\s/g, '-') === match.params.person}\n                selectRow={selectRow}\n              />\n            )\n          )}\n        </tbody>\n      </table>\n    )\n  );\n};\n\nPeopleTable.propTypes = {\n  people: PropTypes.arrayOf(PropTypes.object).isRequired,\n  sortFields: PropTypes.func.isRequired,\n};\n\nexport default React.memo(PeopleTable);\n","const URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nexport const getPeopleFromServer = async() => {\n  const response = await fetch(URL);\n\n  return response.json();\n};\n","import React, { useState, useEffect } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { DebounceInput } from 'react-debounce-input';\nimport './App.scss';\nimport PeopleTable from './PeopleTable';\nimport { getPeopleFromServer } from './api';\n\nconst getPeopleWithIds = peopleList => peopleList.map(\n  (person, i) => ({\n    ...person,\n    id: i,\n    age: person.died - person.born,\n    century: Math.ceil(person.died / 100),\n  })\n);\n\nconst PeoplePage = () => {\n  const [people, setPeople] = useState([]);\n  const [curField, setCurField] = useState('');\n  const location = useLocation();\n  const history = useHistory();\n  const search = new URLSearchParams(location.search);\n  const query = search.get('query');\n  let visiblePeople = [...people];\n\n  const getPeople = async() => {\n    const peopleFromServer = await getPeopleFromServer();\n    const peopleFromServerWithIds = getPeopleWithIds(peopleFromServer);\n\n    setPeople(peopleFromServerWithIds);\n  };\n\n  useEffect(() => {\n    getPeople();\n  }, []);\n\n  if (query) {\n    const searchQuery = query.trim().toLowerCase();\n\n    visiblePeople = people.filter(\n      person => (person.name + person.mother + person.father).toLowerCase()\n        .includes(searchQuery)\n    );\n  }\n\n  const sortData = (field, type) => {\n    let peopleCopy = [...people];\n\n    switch (type) {\n      case 'string':\n        peopleCopy = peopleCopy\n          .map(person => ({\n            ...person,\n            [field]: person[field] || '',\n          }))\n          .sort((a, b) => a[field].localeCompare(b[field]));\n\n        return peopleCopy;\n\n      case 'number':\n        peopleCopy.sort((a, b) => a[field] - b[field]);\n\n        return peopleCopy;\n\n      default:\n        peopleCopy.sort();\n\n        return peopleCopy;\n    }\n  };\n\n  const sortFields = (field, type, sortOrder) => {\n    search.set('sortBy', field);\n\n    if (field !== curField) {\n      if (sortOrder === 'asc') {\n        setPeople(sortData(field, type));\n        search.set('sortOrder', 'asc');\n      } else {\n        setPeople(sortData(field, type).reverse());\n        search.set('sortOrder', 'desc');\n      }\n\n      setCurField(field);\n    } else {\n      setPeople(prev => [...prev].reverse());\n      setCurField('');\n      search.set(\n        'sortOrder', search.get('sortOrder') === 'desc' ? 'asc' : 'desc'\n      );\n    }\n\n    history.push({ search: search.toString() });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">\n        People table\n      </h1>\n      <section className=\"people\">\n        <DebounceInput\n          className=\"search\"\n          placeholder=\"Type to search...\"\n          type=\"search\"\n          debounceTimeout={500}\n          onChange={(e) => {\n            search.set('query', e.target.value);\n            history.push({ search: search.toString() });\n          }}\n        />\n        {people.length > 0\n          ? (\n            <PeopleTable\n              people={visiblePeople}\n              sortFields={sortFields}\n              sortData={sortData}\n            />\n          )\n          : 'Loading...'\n        }\n        <div className=\"people__count\">\n          {`Rows in table: ${visiblePeople.length}`}\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default PeoplePage;\n","import React from 'react';\nimport { Link, Route } from 'react-router-dom';\nimport './App.scss';\nimport PeoplePage from './PeoplePage';\n\nconst App = () => (\n  <>\n    <Link to=\"/people\">People</Link>\n    <Route path=\"/people/:person?\" component={PeoplePage} />\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>\n  , document.getElementById('root')\n);\n"],"sourceRoot":""}