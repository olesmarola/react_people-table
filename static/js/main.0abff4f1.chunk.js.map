{"version":3,"sources":["PersonRow.js","const.js","PeopleTable.js","api.js","PeoplePage.js","App.js","index.js"],"names":["memo","_ref","selected","selectRow","headers","person","id","sex","born","age","century","react_default","a","createElement","className","cn","concat","person--selected","onClick","map","header","key","code","person__bornBefore1650","person__after65","TABLE_HEADERS","label","type","people","handleSortClick","location","useLocation","history","useHistory","match","useRouteMatch","push","pathname","find","name","toLowerCase","replace","search","length","src_PersonRow","params","getPeopleFromServer","response","regenerator_default","async","_context","prev","next","awrap","fetch","sent","abrupt","json","stop","_useState","useState","_useState2","Object","slicedToArray","setPeople","URLSearchParams","query","get","visiblePeople","toConsumableArray","useEffect","peopleFromServer","peopleFromServerWithIds","i","objectSpread2","died","Math","ceil","getPeople","searchQuery","trim","filter","mother","father","includes","getSortedPeople","listOfPeople","field","peopleCopy","defineProperty","sort","b","localeCompare","sortOrder","fieldType","reverse","setSortBy","lib","placeholder","debounceTimeout","onChange","e","set","target","value","toString","src_PeopleTable","sortingTitle","App","Fragment","react_router_dom","to","react_router","path","component","PeoplePage","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.0abff4f1.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst PersonRow = ({ selected, selectRow, headers, person }) => {\n  const { id, sex, born, age, century } = person;\n\n  return (\n    <tr\n      className={\n        cn(\n          'person',\n          `person person--lived-in-${century}`,\n          sex === 'm' ? 'person--male' : 'person--female',\n          { 'person--selected': selected }\n        )}\n      onClick={() => selectRow(id)}\n    >\n      {headers.map(header => (\n        <td\n          key={header.code}\n          className={\n            cn(\n              { person__bornBefore1650: header.code === 'name' && born < 1650 },\n              { person__after65: header.code === 'age' && age >= 65 }\n            )\n          }\n        >\n          {person[header.code]}\n        </td>\n      ))}\n    </tr>\n  );\n};\n\nPersonRow.propTypes = {\n  person: PropTypes.shape({\n    id: PropTypes.number,\n    sex: PropTypes.string,\n    born: PropTypes.number,\n    age: PropTypes.number,\n    century: PropTypes.number,\n  }).isRequired,\n  selected: PropTypes.bool.isRequired,\n  selectRow: PropTypes.func.isRequired,\n  headers: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default memo(PersonRow);\n","export const TABLE_HEADERS = [\n  {\n    code: 'id',\n    label: 'Id',\n    type: 'number',\n  },\n  {\n    code: 'name',\n    label: 'Name',\n    type: 'string',\n  },\n  {\n    code: 'sex',\n    label: 'Sex',\n    type: 'string',\n  },\n  {\n    code: 'born',\n    label: 'Born',\n    type: 'number',\n  },\n  {\n    code: 'died',\n    label: 'Died',\n    type: 'number',\n  },\n  {\n    code: 'age',\n    label: 'Age',\n    type: 'number',\n  },\n  {\n    code: 'century',\n    label: 'Century',\n    type: 'number',\n  },\n  {\n    code: 'mother',\n    label: 'Mother',\n    type: 'string',\n  },\n  {\n    code: 'father',\n    label: 'Father',\n    type: 'string',\n  },\n];\n","import React, { memo } from 'react';\nimport { useHistory, useRouteMatch, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport PersonRow from './PersonRow';\nimport { TABLE_HEADERS } from './const';\n\nconst PeopleTable = ({ people, handleSortClick }) => {\n  const location = useLocation();\n  const history = useHistory();\n  const match = useRouteMatch();\n\n  const selectRow = (id) => {\n    history.push({\n      pathname: `/people/${people\n        .find(person => id === person.id).name\n        .toLowerCase()\n        .replace(/\\s/g, '-')}`,\n      search: location.search,\n    });\n  };\n\n  return (\n    people.length > 0 && (\n      <table className=\"people__table\">\n        <thead>\n          <tr>\n            {TABLE_HEADERS.map(header => (\n              <th\n                key={header.code}\n                onClick={() => {\n                  handleSortClick(header.code);\n                }}\n              >\n                {header.label}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {people.map(\n            person => (\n              <PersonRow\n                key={person.name}\n                person={person}\n                headers={TABLE_HEADERS}\n                selected={person.name\n                  .toLowerCase()\n                  .replace(/\\s/g, '-') === match.params.person}\n                selectRow={selectRow}\n              />\n            )\n          )}\n        </tbody>\n      </table>\n    )\n  );\n};\n\nPeopleTable.propTypes = {\n  people: PropTypes.arrayOf(PropTypes.object).isRequired,\n  sortFields: PropTypes.func.isRequired,\n};\n\nexport default memo(PeopleTable);\n","const URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nexport const getPeopleFromServer = async() => {\n  const response = await fetch(URL);\n\n  return response.json();\n};\n","import React, { useState, useEffect, memo } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { DebounceInput } from 'react-debounce-input';\nimport './App.scss';\nimport PeopleTable from './PeopleTable';\nimport { getPeopleFromServer } from './api';\nimport { TABLE_HEADERS } from './const';\n\nconst getPeopleWithIds = peopleList => peopleList.map(\n  (person, i) => ({\n    ...person,\n    id: i,\n    age: person.died - person.born,\n    century: Math.ceil(person.died / 100),\n  })\n);\n\nconst PeoplePage = () => {\n  const [people, setPeople] = useState([]);\n  const location = useLocation();\n  const history = useHistory();\n  const search = new URLSearchParams(location.search);\n  const query = search.get('query');\n  let visiblePeople = [...people];\n\n  const getPeople = async() => {\n    const peopleFromServer = await getPeopleFromServer();\n    const peopleFromServerWithIds = getPeopleWithIds(peopleFromServer);\n\n    setPeople(peopleFromServerWithIds);\n  };\n\n  useEffect(() => {\n    getPeople();\n  }, []);\n\n  if (query) {\n    const searchQuery = query.trim().toLowerCase();\n\n    visiblePeople = people.filter(\n      person => (person.name + person.mother + person.father).toLowerCase()\n        .includes(searchQuery)\n    );\n  }\n\n  const handleSortClick = (sortingTitle) => {\n    if (search.get('sortBy') !== sortingTitle) {\n      search.set('sortBy', sortingTitle);\n      search.set('sortOrder', 'asc');\n    } else {\n      search.set('sortOrder',\n        search.get('sortOrder') === 'asc' ? 'desc' : 'asc');\n    }\n\n    history.push({ search: search.toString() });\n  };\n\n  const getSortedPeople = (listOfPeople, field, type) => {\n    let peopleCopy = [...listOfPeople];\n\n    switch (type) {\n      case 'string':\n        peopleCopy = peopleCopy\n          .map(person => ({\n            ...person,\n            [field]: person[field] || '',\n          }))\n          .sort((a, b) => a[field].localeCompare(b[field]));\n\n        return peopleCopy;\n\n      case 'number':\n        peopleCopy.sort((a, b) => a[field] - b[field]);\n\n        return peopleCopy;\n\n      default:\n        peopleCopy.sort();\n\n        return peopleCopy;\n    }\n  };\n\n  const setSortBy = (listOfPeople, field, sortOrder) => {\n    const fieldType = TABLE_HEADERS.find(header => header.code === field).type;\n\n    if (sortOrder === 'desc') {\n      return getSortedPeople(listOfPeople, field, fieldType).reverse();\n    }\n\n    return getSortedPeople(listOfPeople, field, fieldType);\n  };\n\n  visiblePeople = search.get('sortBy')\n    ? [...setSortBy([...visiblePeople],\n      search.get('sortBy'), search.get('sortOrder') || 'asc')]\n    : [...visiblePeople];\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">\n        People table\n      </h1>\n      <section className=\"people\">\n        <DebounceInput\n          className=\"search\"\n          placeholder=\"Type to search...\"\n          type=\"search\"\n          debounceTimeout={500}\n          onChange={(e) => {\n            search.set('query', e.target.value);\n            history.push({ search: search.toString() });\n          }}\n        />\n        {people.length > 0\n          ? (\n            <PeopleTable\n              people={visiblePeople}\n              handleSortClick={handleSortClick}\n            />\n          )\n          : 'Loading...'\n        }\n        <div className=\"people__count\">\n          {`Rows in table: ${visiblePeople.length}`}\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default memo(PeoplePage);\n","import React from 'react';\nimport { Link, Route } from 'react-router-dom';\nimport './App.scss';\nimport PeoplePage from './PeoplePage';\n\nconst App = () => (\n  <>\n    <Link to=\"/people\">People</Link>\n    <Route path=\"/people/:person?\" component={PeoplePage} />\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>\n  , document.getElementById('root')\n);\n"],"sourceRoot":""}